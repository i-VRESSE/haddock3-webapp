version: "3.9"

services:
  webapp:
    image: ghcr.io/i-vresse/haddock3-webapp
    build:
      context: ../..
      dockerfile: deploy/Dockerfile
    restart: always
    entrypoint: /usr/bin/sh
    command: ["-c", "/wait && npx prisma migrate deploy && npm run start"]
    depends_on:
      bartender:
        condition: service_started
      webappdb:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      BARTENDER_API_URL: "http://bartender:8000"
      DATABASE_URL: postgresql://postgres:postgres@webappdb:5432/postgres
      BARTENDER_PRIVATE_KEY: /certs/private_key.pem
      SESSION_SECRET_FILE: /certs/session.secret
      WAIT_PATHS: /certs/private_key.pem
    volumes:
      - bartender-certs:/certs:ro

  webappdb:
    image: postgres:15.4-bullseye
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - webapp-db-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 3s
      retries: 40

  bartender:
    image: ghcr.io/i-vresse/bartender
    build:
      context: ..
      dockerfile: ./Dockerfile.bartenderhaddock3
    restart: always
    command: sh -c '/wait && alembic upgrade head && bartender serve'
    volumes:
      - type: bind
        source: ./bartender-config.yaml
        target: /opt/bartender/config.yaml
      - bartender-certs:/certs:ro
      - bartender-job-data:/jobs
    depends_on:
      bartenderdb:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      BARTENDER_HOST: 0.0.0.0
      BARTENDER_DB_HOST: bartenderdb
      BARTENDER_DB_PORT: 5432
      BARTENDER_DB_USER: postgres
      BARTENDER_DB_PASS: postgres
      BARTENDER_DB_BASE: postgres
      BARTENDER_LOG_LEVEL: error
      BARTENDER_PUBLIC_KEY: /certs/public_key.pem
      WAIT_PATHS: /certs/private_key.pem

  bartenderdb:
    image: postgres:15.4-bullseye
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - bartender-db-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 3s
      retries: 40

  redis:
    image: redis:6.2.6
    restart: always

  bartenderworker:
    image: ghcr.io/i-vresse/bartender
    build:
      context: ..
      dockerfile: ./Dockerfile.bartenderhaddock3
    restart: always
    command: sh -c 'bartender perform'
    volumes:
      - type: bind
        source: ./bartender-config.yaml
        target: /opt/bartender/config.yaml
      - bartender-job-data:/jobs
    depends_on:
      redis:
        condition: service_started

  certmaker:
    build:
      context: ..
      dockerfile: ./Dockerfile.openssl
    volumes:
      - bartender-certs:/certs
    working_dir: /certs
    restart: "no"

volumes:
  # Tried to use single postgres, but prisma complains about non-empty database (P3005 error).
  webapp-db-data:
  bartender-db-data:
  bartender-job-data:
  bartender-certs:
