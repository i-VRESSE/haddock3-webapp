services:
  nginx:
    volumes:
      - type: bind
        source: ./haddock30.nginx.conf
        # TODO make in portal repo /nginx/*.conf:server include /etc/nginx/services/* files
        target: /etc/nginx/services/haddock3.conf
    depends_on:
      h3webapp:
        condition: service_started
  h3webapp:
    image: ghcr.io/i-vresse/haddock3-webapp:${WEBAPP_TAG:-latest}
    build:
      context: ../..
      dockerfile: deploy/Dockerfile
      args:
        HADDOCK3WEBAPP_PREFIX: /haddock30/
    restart: always
    entrypoint: /usr/bin/sh
    command: ["-c", "/wait && npm run setup && npm run start"]
    depends_on:
      bartender:
        condition: service_started
      h3webappdb:
        condition: service_healthy
      h3restraints:
        condition: service_started
      backend:
        condition: service_started
    environment:
      BARTENDER_API_URL: "http://bartender:8000"
      DATABASE_URL: postgresql://postgres:postgres@h3webappdb:5432/postgres
      BARTENDER_PRIVATE_KEY: /certs/private_key.pem
      SESSION_SECRET_FILE: /certs/session.secret
      WAIT_PATHS: /certs/private_key.pem
      HADDOCK3_RESTRAINTS_URL: "http://h3restraints:5000"
      HADDOCK3WEBAPP_CSB_PORTAL: active
      HADDOCK3WEBAPP_CSB_PORTAL_BACKEND: http://backend:8180/api
    volumes:
      - bartender-certs:/certs:ro

  h3webappdb:
    image: postgres:15.4-bullseye
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - h3webapp-db-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 3s
      retries: 40

  bartender:
    image: ghcr.io/i-vresse/bartender:${BARTENDER_TAG:-latest}
    build:
      context: ..
      dockerfile: ./Dockerfile.bartenderhaddock3
    restart: always
    command: sh -c '/wait && alembic upgrade head && bartender serve'
    volumes:
      - type: bind
        # TODO create bartender config in csbportal repo under /bartender
        source: ../../../bartender/bartender-config.yaml
        target: /opt/bartender/config.yaml
      - bartender-certs:/certs:ro
      - bartender-job-data:/jobs
      # To use a local private ssh key to login to the remote slurm machine
      # uncomment the following lines
      # The key should not have a passphrase.
      # - type: bind
      #   source: ~/.ssh/id_rsa
      #   target: /home/bartender/.ssh/id_rsa
    depends_on:
      bartenderdb:
        condition: service_healthy
    environment:
      BARTENDER_HOST: 0.0.0.0
      BARTENDER_DB_HOST: bartenderdb
      BARTENDER_DB_PORT: 5432
      BARTENDER_DB_USER: postgres
      BARTENDER_DB_PASS: postgres
      BARTENDER_DB_BASE: postgres
      BARTENDER_WORKERS_COUNT: 4
      BARTENDER_LOG_LEVEL: error
      BARTENDER_PUBLIC_KEY: /certs/public_key.pem
      WAIT_PATHS: /certs/private_key.pem

  bartenderdb:
    image: postgres:15.4-bullseye
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - bartender-db-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 3s
      retries: 40

  certmaker:
    build:
      context: ..
      dockerfile: ./Dockerfile.openssl
    volumes:
      - bartender-certs:/certs
    working_dir: /certs
    restart: "no"

  h3restraints:
    image: ghcr.io/i-vresse/bartender:${BARTENDER_TAG:-latest}
    build:
      context: ..
      dockerfile: ./Dockerfile.bartenderhaddock3
    restart: always
    command: sh -c 'uvicorn --host 0.0.0.0 --port 5000 haddock.clis.restraints.webservice:app'

volumes:
  h3webapp-db-data:
  bartender-db-data:
  bartender-job-data:
  bartender-certs:
