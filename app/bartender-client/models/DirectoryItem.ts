/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An entry in a directory.
 * @export
 * @interface DirectoryItem
 */
export interface DirectoryItem {
    /**
     * 
     * @type {string}
     * @memberof DirectoryItem
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof DirectoryItem
     */
    path: string;
    /**
     * 
     * @type {boolean}
     * @memberof DirectoryItem
     */
    isDir: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DirectoryItem
     */
    isFile: boolean;
    /**
     * 
     * @type {Array<DirectoryItem>}
     * @memberof DirectoryItem
     */
    children?: Array<DirectoryItem>;
}

/**
 * Check if a given object implements the DirectoryItem interface.
 */
export function instanceOfDirectoryItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "isDir" in value;
    isInstance = isInstance && "isFile" in value;

    return isInstance;
}

export function DirectoryItemFromJSON(json: any): DirectoryItem {
    return DirectoryItemFromJSONTyped(json, false);
}

export function DirectoryItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): DirectoryItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'path': json['path'],
        'isDir': json['is_dir'],
        'isFile': json['is_file'],
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(DirectoryItemFromJSON)),
    };
}

export function DirectoryItemToJSON(value?: DirectoryItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'path': value.path,
        'is_dir': value.isDir,
        'is_file': value.isFile,
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(DirectoryItemToJSON)),
    };
}

