/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configuration for an interactive application.
 * 
 * Interactive apps that can be run on a completed job.
 * 
 * Interactive apps are small interactive calculations that
 * can be run within a request-response cycle (<30s).
 * 
 * A interactive app should
 * 
 * * be quick to run (<60s)
 * * produce very little output (stdout, stderr, files)
 * * in the job directory only write new files and overwrite its own files.
 * * not have any arguments that can leak information,
 *     for example paths to files outside the job directory.
 * 
 * Example:
 * 
 *     Given completed job 123 run interactive app rescore with:
 * 
 *     ```python
 *     response = client.post('/api/job/123/interactiveapp/rescore', json={
 *         'module': 1,
 *         'w_elec': 0.2,
 *         'w_vdw': 0.2,
 *         'w_desolv': 0.2,
 *         'w_bsa': 0.1,
 *         'w_air': 0.3,
 *     })
 *     if response.json()['returncode'] == 0:
 *         # Find the results in the job directory somewhere
 *         files = client.get('/api/job/123/files')
 *     ```
 * 
 * Attributes:
 *     command: Shell command template to run in job directory.
 *         Use Python string template syntax to substitute variables from request body.
 *     input: JSON schema of request body.
 *         Dialect of JSON Schema should be draft 2020-12.
 *         Root should be an object and its properties should be scalar.
 *     description: Description of the interactive app.
 *     timeout: Maximum time in seconds to wait for command to finish.
 * @export
 * @interface InteractiveApplicationConfiguration
 */
export interface InteractiveApplicationConfiguration {
    /**
     * 
     * @type {string}
     * @memberof InteractiveApplicationConfiguration
     */
    command: string;
    /**
     * 
     * @type {object}
     * @memberof InteractiveApplicationConfiguration
     */
    input: object;
    /**
     * 
     * @type {string}
     * @memberof InteractiveApplicationConfiguration
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof InteractiveApplicationConfiguration
     */
    timeout?: number;
}

/**
 * Check if a given object implements the InteractiveApplicationConfiguration interface.
 */
export function instanceOfInteractiveApplicationConfiguration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "command" in value;
    isInstance = isInstance && "input" in value;

    return isInstance;
}

export function InteractiveApplicationConfigurationFromJSON(json: any): InteractiveApplicationConfiguration {
    return InteractiveApplicationConfigurationFromJSONTyped(json, false);
}

export function InteractiveApplicationConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): InteractiveApplicationConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'command': json['command'],
        'input': json['input'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
    };
}

export function InteractiveApplicationConfigurationToJSON(value?: InteractiveApplicationConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'command': value.command,
        'input': value.input,
        'description': value.description,
        'timeout': value.timeout,
    };
}

