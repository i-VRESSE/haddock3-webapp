/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ApplicatonConfiguration, HTTPValidationError } from "../models";
import {
  ApplicatonConfigurationFromJSON,
  ApplicatonConfigurationToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models";

export interface GetApplicationRequest {
  application: string;
}

export interface UploadJobRequest {
  application: string;
  upload: Blob;
}

/**
 *
 */
export class ApplicationApi extends runtime.BaseAPI {
  /**
   * Retrieve application configuration.  Args:     application: Name of application     config: Config with applications.  Returns:     The application config.
   * Get Application
   */
  async getApplicationRaw(
    requestParameters: GetApplicationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApplicatonConfiguration>> {
    if (
      requestParameters.application === null ||
      requestParameters.application === undefined
    ) {
      throw new runtime.RequiredError(
        "application",
        "Required parameter requestParameters.application was null or undefined when calling getApplication."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/application/{application}`.replace(
          `{${"application"}}`,
          encodeURIComponent(String(requestParameters.application))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ApplicatonConfigurationFromJSON(jsonValue)
    );
  }

  /**
   * Retrieve application configuration.  Args:     application: Name of application     config: Config with applications.  Returns:     The application config.
   * Get Application
   */
  async getApplication(
    requestParameters: GetApplicationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApplicatonConfiguration> {
    const response = await this.getApplicationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * List application names.  Args:     config: Config with applications.  Returns:     The list.
   * List Applications
   */
  async listApplicationsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/application/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * List application names.  Args:     config: Config with applications.  Returns:     The list.
   * List Applications
   */
  async listApplications(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.listApplicationsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Creates job model in the database, stage archive locally and submit to scheduler.  Args:     application: Name of application to run job for.     upload: Archive with config file for application.     request: request object.     job_dao: JobDAO object.     submitter: User who submitted job.     context: Context with applications and destinations.  Raises:     IndexError: When job could not created inside database or when config         file was not found.     KeyError: Application is invalid.  Returns:     redirect response.
   * Upload Job
   */
  async uploadJobRaw(
    requestParameters: UploadJobRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.application === null ||
      requestParameters.application === undefined
    ) {
      throw new runtime.RequiredError(
        "application",
        "Required parameter requestParameters.application was null or undefined when calling uploadJob."
      );
    }

    if (
      requestParameters.upload === null ||
      requestParameters.upload === undefined
    ) {
      throw new runtime.RequiredError(
        "upload",
        "Required parameter requestParameters.upload was null or undefined when calling uploadJob."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    if (this.configuration && this.configuration.apiKey) {
      queryParameters["token"] = this.configuration.apiKey("token"); // APIKeyQuery authentication
    }

    const consumes: runtime.Consume[] = [
      { contentType: "multipart/form-data" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.upload !== undefined) {
      formParams.append("upload", requestParameters.upload as any);
    }

    const response = await this.request(
      {
        path: `/api/application/{application}/job`.replace(
          `{${"application"}}`,
          encodeURIComponent(String(requestParameters.application))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Creates job model in the database, stage archive locally and submit to scheduler.  Args:     application: Name of application to run job for.     upload: Archive with config file for application.     request: request object.     job_dao: JobDAO object.     submitter: User who submitted job.     context: Context with applications and destinations.  Raises:     IndexError: When job could not created inside database or when config         file was not found.     KeyError: Application is invalid.  Returns:     redirect response.
   * Upload Job
   */
  async uploadJob(
    requestParameters: UploadJobRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.uploadJobRaw(requestParameters, initOverrides);
  }
}
