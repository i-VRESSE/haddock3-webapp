/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BearerResponse,
  ErrorModel,
  HTTPValidationError,
  OAuth2AuthorizeResponse,
  UserCreate,
  UserRead,
} from '../models';
import {
    BearerResponseFromJSON,
    BearerResponseToJSON,
    ErrorModelFromJSON,
    ErrorModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OAuth2AuthorizeResponseFromJSON,
    OAuth2AuthorizeResponseToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserReadFromJSON,
    UserReadToJSON,
} from '../models';

export interface AuthLocalLoginRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface OauthAssociateGithubAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthAssociateGithubCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface OauthAssociateOrcidOrgAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthAssociateOrcidOrgCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface OauthAssociateSandboxOrcidOrgAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthAssociateSandboxOrcidOrgCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface OauthGithubRemoteAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthGithubRemoteCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface OauthOrcidOrgRemoteAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthOrcidOrgRemoteCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface OauthSandboxOrcidOrgRemoteAuthorizeRequest {
    scopes?: Array<string>;
}

export interface OauthSandboxOrcidOrgRemoteCallbackRequest {
    code?: string;
    codeVerifier?: string;
    state?: string;
    error?: string;
}

export interface RegisterRegisterRequest {
    userCreate: UserCreate;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Auth:Local.Login
     */
    async authLocalLoginRaw(requestParameters: AuthLocalLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BearerResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling authLocalLogin.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling authLocalLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/auth/jwt/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BearerResponseFromJSON(jsonValue));
    }

    /**
     * Auth:Local.Login
     */
    async authLocalLogin(requestParameters: AuthLocalLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BearerResponse> {
        const response = await this.authLocalLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Auth:Local.Logout
     */
    async authLocalLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/jwt/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Auth:Local.Logout
     */
    async authLocalLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.authLocalLogoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * Oauth-Associate:Github.Authorize
     */
    async oauthAssociateGithubAuthorizeRaw(requestParameters: OauthAssociateGithubAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/github/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth-Associate:Github.Authorize
     */
    async oauthAssociateGithubAuthorize(requestParameters: OauthAssociateGithubAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthAssociateGithubAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Github.Callback
     */
    async oauthAssociateGithubCallbackRaw(requestParameters: OauthAssociateGithubCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/github/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserReadFromJSON(jsonValue));
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Github.Callback
     */
    async oauthAssociateGithubCallback(requestParameters: OauthAssociateGithubCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.oauthAssociateGithubCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth-Associate:Orcid.Org.Authorize
     */
    async oauthAssociateOrcidOrgAuthorizeRaw(requestParameters: OauthAssociateOrcidOrgAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/orcid/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth-Associate:Orcid.Org.Authorize
     */
    async oauthAssociateOrcidOrgAuthorize(requestParameters: OauthAssociateOrcidOrgAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthAssociateOrcidOrgAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Orcid.Org.Callback
     */
    async oauthAssociateOrcidOrgCallbackRaw(requestParameters: OauthAssociateOrcidOrgCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/orcid/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserReadFromJSON(jsonValue));
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Orcid.Org.Callback
     */
    async oauthAssociateOrcidOrgCallback(requestParameters: OauthAssociateOrcidOrgCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.oauthAssociateOrcidOrgCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth-Associate:Sandbox.Orcid.Org.Authorize
     */
    async oauthAssociateSandboxOrcidOrgAuthorizeRaw(requestParameters: OauthAssociateSandboxOrcidOrgAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/orcidsandbox/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth-Associate:Sandbox.Orcid.Org.Authorize
     */
    async oauthAssociateSandboxOrcidOrgAuthorize(requestParameters: OauthAssociateSandboxOrcidOrgAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthAssociateSandboxOrcidOrgAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Sandbox.Orcid.Org.Callback
     */
    async oauthAssociateSandboxOrcidOrgCallbackRaw(requestParameters: OauthAssociateSandboxOrcidOrgCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/associate/orcidsandbox/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserReadFromJSON(jsonValue));
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth-Associate:Sandbox.Orcid.Org.Callback
     */
    async oauthAssociateSandboxOrcidOrgCallback(requestParameters: OauthAssociateSandboxOrcidOrgCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.oauthAssociateSandboxOrcidOrgCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth:Github.Remote.Authorize
     */
    async oauthGithubRemoteAuthorizeRaw(requestParameters: OauthGithubRemoteAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/github/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth:Github.Remote.Authorize
     */
    async oauthGithubRemoteAuthorize(requestParameters: OauthGithubRemoteAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthGithubRemoteAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Github.Remote.Callback
     */
    async oauthGithubRemoteCallbackRaw(requestParameters: OauthGithubRemoteCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/github/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Github.Remote.Callback
     */
    async oauthGithubRemoteCallback(requestParameters: OauthGithubRemoteCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauthGithubRemoteCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth:Orcid.Org.Remote.Authorize
     */
    async oauthOrcidOrgRemoteAuthorizeRaw(requestParameters: OauthOrcidOrgRemoteAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/orcid/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth:Orcid.Org.Remote.Authorize
     */
    async oauthOrcidOrgRemoteAuthorize(requestParameters: OauthOrcidOrgRemoteAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthOrcidOrgRemoteAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Orcid.Org.Remote.Callback
     */
    async oauthOrcidOrgRemoteCallbackRaw(requestParameters: OauthOrcidOrgRemoteCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/orcid/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Orcid.Org.Remote.Callback
     */
    async oauthOrcidOrgRemoteCallback(requestParameters: OauthOrcidOrgRemoteCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauthOrcidOrgRemoteCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Oauth:Sandbox.Orcid.Org.Remote.Authorize
     */
    async oauthSandboxOrcidOrgRemoteAuthorizeRaw(requestParameters: OauthSandboxOrcidOrgRemoteAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2AuthorizeResponse>> {
        const queryParameters: any = {};

        if (requestParameters.scopes) {
            queryParameters['scopes'] = requestParameters.scopes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/orcidsandbox/authorize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2AuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Oauth:Sandbox.Orcid.Org.Remote.Authorize
     */
    async oauthSandboxOrcidOrgRemoteAuthorize(requestParameters: OauthSandboxOrcidOrgRemoteAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2AuthorizeResponse> {
        const response = await this.oauthSandboxOrcidOrgRemoteAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Sandbox.Orcid.Org.Remote.Callback
     */
    async oauthSandboxOrcidOrgRemoteCallbackRaw(requestParameters: OauthSandboxOrcidOrgRemoteCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codeVerifier !== undefined) {
            queryParameters['code_verifier'] = requestParameters.codeVerifier;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.error !== undefined) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/orcidsandbox/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * The response varies based on the authentication backend used.
     * Oauth:Sandbox.Orcid.Org.Remote.Callback
     */
    async oauthSandboxOrcidOrgRemoteCallback(requestParameters: OauthSandboxOrcidOrgRemoteCallbackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.oauthSandboxOrcidOrgRemoteCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register:Register
     */
    async registerRegisterRaw(requestParameters: RegisterRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRead>> {
        if (requestParameters.userCreate === null || requestParameters.userCreate === undefined) {
            throw new runtime.RequiredError('userCreate','Required parameter requestParameters.userCreate was null or undefined when calling registerRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters.userCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserReadFromJSON(jsonValue));
    }

    /**
     * Register:Register
     */
    async registerRegister(requestParameters: RegisterRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRead> {
        const response = await this.registerRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
