/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { HTTPValidationError } from "../models";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models";

export interface AssignRoleToUserRequest {
  roleId: string;
  userId: string;
}

export interface UnassignRoleFromUserRequest {
  roleId: string;
  userId: string;
}

/**
 *
 */
export class RolesApi extends runtime.BaseAPI {
  /**
   * Assign role to user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles assigned to user.
   * Assign Role To User
   */
  async assignRoleToUserRaw(
    requestParameters: AssignRoleToUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (
      requestParameters.roleId === null ||
      requestParameters.roleId === undefined
    ) {
      throw new runtime.RequiredError(
        "roleId",
        "Required parameter requestParameters.roleId was null or undefined when calling assignRoleToUser."
      );
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling assignRoleToUser."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        []
      );
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/roles/{role_id}/{user_id}`
          .replace(
            `{${"role_id"}}`,
            encodeURIComponent(String(requestParameters.roleId))
          )
          .replace(
            `{${"user_id"}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Assign role to user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles assigned to user.
   * Assign Role To User
   */
  async assignRoleToUser(
    requestParameters: AssignRoleToUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.assignRoleToUserRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * List available roles.  Requires logged in user to be a super user.  Args:     roles: Roles from config.     super_user: Checks if current user is super.  Returns:     List of role names.
   * List Roles
   */
  async listRolesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        []
      );
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/roles/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * List available roles.  Requires logged in user to be a super user.  Args:     roles: Roles from config.     super_user: Checks if current user is super.  Returns:     List of role names.
   * List Roles
   */
  async listRoles(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.listRolesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Unassign role from user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles assigned to user.
   * Unassign Role From User
   */
  async unassignRoleFromUserRaw(
    requestParameters: UnassignRoleFromUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (
      requestParameters.roleId === null ||
      requestParameters.roleId === undefined
    ) {
      throw new runtime.RequiredError(
        "roleId",
        "Required parameter requestParameters.roleId was null or undefined when calling unassignRoleFromUser."
      );
    }

    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        "userId",
        "Required parameter requestParameters.userId was null or undefined when calling unassignRoleFromUser."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken(
        "OAuth2PasswordBearer",
        []
      );
    }

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/roles/{role_id}/{user_id}`
          .replace(
            `{${"role_id"}}`,
            encodeURIComponent(String(requestParameters.roleId))
          )
          .replace(
            `{${"user_id"}}`,
            encodeURIComponent(String(requestParameters.userId))
          ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Unassign role from user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles assigned to user.
   * Unassign Role From User
   */
  async unassignRoleFromUser(
    requestParameters: UnassignRoleFromUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.unassignRoleFromUserRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
