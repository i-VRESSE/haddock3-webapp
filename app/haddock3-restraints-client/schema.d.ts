// This file was generated with "npm run generate-client:restraints" command.
// Do not edit this file manually.

export interface paths {
  "/passive_from_active": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Calculate Passive From Active
     * @description Calculate active restraints to passive restraints.
     */
    post: operations["calculate_passive_from_active_passive_from_active_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/actpass_to_ambig": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Calculate Actpass To Ambig
     * @description Get the passive residues.
     */
    post: operations["calculate_actpass_to_ambig_actpass_to_ambig_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/restrain_bodies": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Restrain Bodies
     * @description Create distance restraints to lock several chains together.
     */
    post: operations["restrain_bodies_restrain_bodies_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/calc_accessibility": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Calculate Accessibility
     * @description Calculate the accessibility of the side chains and apply a cutoff.
     */
    post: operations["calculate_accessibility_calc_accessibility_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/validate_tbl": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Validate Tbl */
    post: operations["validate_tbl_validate_tbl_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/preprocess_pdb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Preprocess Pdb
     * @description Preprocess a PDB file.
     *
     *     Runs the following [pdbtools](http://www.bonvinlab.org/pdb-tools/) pipeline:
     *
     *     ```shell
     *     cat pdb | pdb_tidy -strict | pdb_selchain -<from_chain> | pdb_chain -<to_chain> | pdb_fixinsert | pdb_selaltloc | pdb_tidy -strict
     *     ```
     *
     *     or with `delhetatm` and `keepcoord` set to true:
     *
     *     ```shell
     *     cat pdb | pdb_tidy -strict | pdb_selchain -<from_chain> | pdb_chain -<to_chain> | pdb_delhetatm |         pdb_fixinsert | pdb_keepcoord | pdb_selaltloc | pdb_tidy -strict
     *     ```
     */
    post: operations["preprocess_pdb_preprocess_pdb_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ActPassToAmbigRequest */
    ActPassToAmbigRequest: {
      /**
       * Active1
       * @description List of active residues for the first model.
       */
      active1: number[];
      /**
       * Active2
       * @description List of active residues for the second model.
       */
      active2: number[];
      /**
       * Passive1
       * @description List of passive residues for the first model.
       */
      passive1: number[];
      /**
       * Passive2
       * @description List of passive residues for the second model.
       */
      passive2: number[];
      /**
       * Segid1
       * @description Segid to use for the first model.
       * @default A
       */
      segid1: string;
      /**
       * Segid2
       * @description Segid to use for the second model.
       * @default B
       */
      segid2: string;
    };
    /** CalcAccessibilityRequest */
    CalcAccessibilityRequest: {
      /**
       * Structure
       * @description The structure file as a base64 encoded gzipped string.
       */
      structure: string;
      /**
       * Cutoff
       * @description Relative cutoff for sidechain accessibility.
       */
      cutoff: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** PDBPreprocessRequest */
    PDBPreprocessRequest: {
      /**
       * Structure
       * @description The structure file as a base64 encoded gzipped string.
       */
      structure: string;
      /**
       * From Chain
       * @description Chains to keep
       */
      from_chain: string;
      /**
       * To Chain
       * @description New chain identifier
       */
      to_chain: string;
      /**
       * Delhetatm
       * @description Delete HETATM records
       * @default false
       */
      delhetatm: boolean;
      /**
       * Keepcoord
       * @description Remove all non-coordinate records
       * @default false
       */
      keepcoord: boolean;
    };
    /** PassiveFromActiveRequest */
    PassiveFromActiveRequest: {
      /**
       * Structure
       * @description The structure file as a base64 encoded gzipped string.
       */
      structure: string;
      /**
       * Active
       * @description List of active restraints.
       */
      active: number[];
      /**
       * Chain
       * @description The chain identifier.
       * @default A
       */
      chain: string;
      /**
       * Surface
       * @description List of surface restraints.
       * @default []
       */
      surface: number[];
      /**
       * Radius
       * @description The radius from active.
       * @default 6.5
       */
      radius: number;
    };
    /** RestrainBodiesRequest */
    RestrainBodiesRequest: {
      /**
       * Structure
       * @description The structure file as a base64 encoded gzipped string.
       */
      structure: string;
      /**
       * Exclude
       * @description Chains to exclude from the calculation.
       * @default []
       */
      exclude: string[];
    };
    /** ValidateTblRequest */
    ValidateTblRequest: {
      /**
       * Tbl
       * @description The TBL file as base64 encoded gzipped string.
       */
      tbl: string;
      /**
       * Pcs
       * @description Flag to indicate if the TBL file is in PCS mode.
       * @default false
       */
      pcs: boolean;
      /**
       * Quick
       * @description Check global formatting before going line by line (opening/closing parenthesis and quotation marks.
       * @default false
       */
      quick: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  calculate_passive_from_active_passive_from_active_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PassiveFromActiveRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number[];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  calculate_actpass_to_ambig_actpass_to_ambig_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActPassToAmbigRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  restrain_bodies_restrain_bodies_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RestrainBodiesRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  calculate_accessibility_calc_accessibility_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalcAccessibilityRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: number[] | undefined;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  validate_tbl_validate_tbl_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidateTblRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  preprocess_pdb_preprocess_pdb_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PDBPreprocessRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
